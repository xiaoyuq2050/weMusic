# Generated by Django 2.1.1 on 2018-11-26 07:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('spotify_key', models.CharField(blank=True, max_length=500)),
                ('weMusic_playlist', models.CharField(blank=True, max_length=500)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('shown', models.BooleanField(default=False)),
                ('playing_song', models.CharField(blank=True, max_length=500)),
                ('room', models.CharField(blank=True, max_length=500)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=4)),
                ('name', models.CharField(max_length=20)),
                ('status', models.BooleanField(default=False)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('playingTime', models.IntegerField(default=0)),
                ('room_playlist', models.CharField(blank=True, max_length=500)),
                ('host_access_token', models.CharField(default='host_access_token', max_length=500)),
                ('playing_song', models.CharField(blank=True, max_length=500)),
                ('paused', models.IntegerField(default=0)),
                ('skip', models.IntegerField(default=0)),
                ('pinned_count', models.IntegerField(default=0)),
                ('host', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='host_rooms', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='in_rooms', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ManyToManyField(related_name='manage_rooms', to=settings.AUTH_USER_MODEL)),
                ('unverified_members', models.ManyToManyField(related_name='unverified_rooms', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=500)),
                ('artist', models.CharField(max_length=500)),
                ('refer_string', models.CharField(max_length=500)),
                ('num_like', models.IntegerField()),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('album_img', models.CharField(max_length=500)),
                ('pinned_order', models.IntegerField(default=0)),
                ('current_playing', models.IntegerField(default=0)),
                ('room_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='weMusic.Room')),
            ],
        ),
    ]
